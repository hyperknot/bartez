{"version":3,"sources":["config.js","cache.js","utils.js","stores/contract.js","stores/token.js","stores/userStore.js","stores/contractStore.js","components/select.js","components/sync.js","app.js","index.js"],"names":["rpcUrl","networkType","bcdNetworkStr","ipfsGateway","NetworkType","MAINNET","tezos","TezosToolkit","wallet","BeaconWallet","name","setWalletProvider","contractNames","KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton","KT1KEa8z6vWXDJrVqtMrAeDVzsvxat3kHaCE","getCachedLS","key","expirySeconds","prefixedKey","storageStr","localStorage","getItem","storageData","JSON","parse","timestamp","Date","getTime","removeItem","data","setCachedLS","newStorageData","setItem","stringify","getCachedURL","url","waitSeconds","a","cached","sleep","axios","get","res","lookupDomain","address","params","query","post","domain","reverseRecords","items","sec","Promise","resolve","setTimeout","window","flushCachedLS","Object","keys","startsWith","Contract","makeObservable","this","value","token","tokens","push","expanded","observable","action","computed","Token","showImage","UserStore","tezDomain","client","getActiveAccount","activeAccount","setAddress","setDomain","contractStore","loadBalances","requestPermissions","network","type","permissions","console","log","alert","error","clearActiveAccount","location","reload","userStore","ContractStore","map","sum","Array","from","contracts","values","c","length","setLoading","bcdAccountUrl","loadFromBCD","fillContractNames","total","setLargeWallet","offset","balances","tokenData","has","contract","setContract","contractAddress","tokenId","token_id","balance","parseInt","imageKey","includes","thumbnail_uri","imageIpfs","slice","addToken","setName","alias","unescape","loading","set","largeWallet","flow","SelectDiv","observer","style","marginBottom","totalTokens","React","Component","SelectContract","props","className","onClick","toggleExpanded","marginTop","t","SelectToken","display","backgroundImage","allowImage","marginLeft","SyncDiv","justifyContent","sync","unsync","domainOrAddress","App","loadAccount","hasOwnProperty","Error","configure","computedRequiresReaction","reactionRequiresObservable","disableErrorBoundaries","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4af5e0de.chunk.js","sourcesContent":["import { NetworkType } from '@airgap/beacon-sdk'\nimport { BeaconWallet } from '@taquito/beacon-wallet'\nimport { TezosToolkit } from '@taquito/taquito'\n\nconst usingTestnet = false\n// export const ipfsGateway = 'https://ipfs.io/ipfs'\n// export const ipfsGateway = 'https://cloudflare-ipfs.com/ipfs'\nexport const ipfsGateway = 'http://ipfs.hyperknot.com/ipfs'\n\nexport let simulateAddress\n\nexport const largeWalletSize = 10000\n\nif (process.env.NODE_ENV === 'development') {\n  // simulateAddress = 'tz1WEgnR7fKQM78ttbCnQvBw87QfM4Jimnkz'\n  // simulateAddress = 'tz1NiPbBSbbTA2vP5fNN4mBfU1oFVPF9PAEn'\n  // simulateAddress = 'tz1KySTBB8RXWVraggfXWLaLR9H3K3JBEbgt'\n  simulateAddress = 'tz1hvfkpf7HbnE1Rroi7JbyegVjZzu97Yqw6' // nftbiker.tez for performance testing\n}\n\nexport let rpcUrl, networkType, bcdNetworkStr\n\nif (usingTestnet) {\n  rpcUrl = 'https://rpc.hangzhounet.teztnets.xyz'\n  networkType = NetworkType.HANGZHOUNET\n  bcdNetworkStr = 'hangzhounet'\n} else {\n  rpcUrl = 'https://mainnet.api.tez.ie'\n  networkType = NetworkType.MAINNET\n  bcdNetworkStr = 'mainnet'\n}\n\nconst tezos = new TezosToolkit(rpcUrl)\n\nexport const wallet = new BeaconWallet({ name: 'Bartez' })\ntezos.setWalletProvider(wallet)\n\nexport const contractNames = {\n  KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton: 'Hic et Nunc (HEN)',\n  KT1KEa8z6vWXDJrVqtMrAeDVzsvxat3kHaCE: 'fx(hash)',\n}\n","export function getCachedLS(key, expirySeconds) {\n  const prefixedKey = `cached-${key}`\n\n  const storageStr = localStorage.getItem(prefixedKey)\n  if (!storageStr) return null\n\n  const storageData = JSON.parse(storageStr)\n\n  if (!expirySeconds) {\n    return storageData.data\n  }\n\n  if (!storageData.timestamp) {\n    localStorage.removeItem(prefixedKey)\n    return null\n  }\n\n  const diffTime = new Date().getTime() / 1000 - storageData.timestamp\n  if (diffTime > expirySeconds) {\n    localStorage.removeItem(prefixedKey)\n    return null\n  }\n\n  return storageData.data\n}\n\nexport function setCachedLS(key, data) {\n  const prefixedKey = `cached-${key}`\n\n  const newStorageData = {\n    timestamp: new Date().getTime() / 1000,\n    data: data,\n  }\n\n  localStorage.setItem(prefixedKey, JSON.stringify(newStorageData))\n}\n\nexport function flushCachedLS() {\n  for (const key of Object.keys(localStorage)) {\n    if (key.startsWith('cached-')) {\n      localStorage.removeItem(key)\n    }\n  }\n}\n\nwindow.flushCachedLS = flushCachedLS\n","import axios from 'redaxios'\nimport { bcdNetworkStr, ipfsGateway } from './config'\nimport { getCachedLS, setCachedLS } from './cache'\n\nexport async function getCachedURL(url, expirySeconds, waitSeconds) {\n  const cached = getCachedLS(url, expirySeconds)\n  if (cached) return cached\n\n  if (waitSeconds) {\n    await sleep(waitSeconds)\n  }\n\n  const res = await axios.get(url)\n  setCachedLS(url, res.data)\n  return res.data\n}\n\nexport async function getTokenMetadata({ contract, tokenId }) {\n  const url = `https://api.better-call.dev/v1/contract/${bcdNetworkStr}/${contract}/tokens?token_id=${tokenId}`\n  const res = await getCachedURL(url)\n\n  try {\n    const ipfs = res[0].extras['@@empty'].slice(7)\n    return await getIpfsData(ipfs)\n  } catch (error) {\n    return {}\n  }\n}\n\nexport async function getIpfsData(ipfs) {\n  return await getCachedURL(`${ipfsGateway}/${ipfs}`)\n}\n\nexport async function lookupDomain(address) {\n  if (!address) return null\n\n  const key = `tezdomain-${address}`\n\n  const cached = getCachedLS(key, 3600)\n  if (cached) return cached\n\n  const params = {\n    query: `{reverseRecords(where: {address: {in: [${address}]}}) {items {domain: domain {name}}}}`,\n  }\n\n  let domain\n  try {\n    const res = await axios.post('https://api.tezos.domains/graphql', params)\n    domain = res.data.data.reverseRecords.items[0].domain.name\n  } catch (e) {\n    domain = null\n  }\n\n  setCachedLS(key, domain)\n  return domain\n}\n\nexport function sleep(sec) {\n  return new Promise((resolve) => setTimeout(resolve, sec * 1000))\n}\n","import { action, computed, makeObservable, observable } from 'mobx'\n\nexport class Contract {\n  @observable address\n  @observable tokens = []\n  @observable name\n  @observable expanded = false\n\n  constructor() {\n    makeObservable(this)\n  }\n\n  @action\n  setName(value) {\n    if (!value) return\n    this.name = value\n  }\n\n  @action\n  addToken(token) {\n    this.tokens.push(token)\n  }\n\n  @computed\n  get nameOrAddress() {\n    return this.name || this.address\n  }\n\n  @action\n  toggleExpanded() {\n    this.expanded = !this.expanded\n  }\n}\n","import { action, makeObservable, observable } from 'mobx'\n\nexport class Token {\n  @observable contractAddress\n  @observable tokenId\n  @observable name\n  @observable balance\n  @observable imageIpfs\n  @observable showImage = false\n\n  constructor() {\n    makeObservable(this)\n  }\n\n  @action\n  allowImage() {\n    this.showImage = true\n  }\n}\n","import { action, computed, makeObservable, observable } from 'mobx'\n\nimport { bcdNetworkStr, networkType, simulateAddress, wallet } from '../config'\nimport { lookupDomain } from '../utils'\nimport { contractStore } from './contractStore'\n\nclass UserStore {\n  @observable address = null\n  @observable tezDomain\n\n  constructor() {\n    makeObservable(this)\n  }\n\n  @computed\n  get domainOrAddress() {\n    return this.tezDomain || this.address\n  }\n\n  async loadAccount() {\n    const activeAccount = await wallet.client.getActiveAccount()\n    if (activeAccount) {\n      this.setAddress(activeAccount.address)\n      this.setDomain(await lookupDomain(this.address))\n      await contractStore.loadBalances()\n    }\n  }\n\n  async sync() {\n    try {\n      const permissions = await wallet.client.requestPermissions({\n        network: {\n          type: networkType,\n        },\n      })\n      console.log('New connection:', permissions.address)\n      this.address = permissions.address\n    } catch (error) {\n      alert('Error syncing')\n      console.error(error)\n    }\n\n    // await contractStore.loadBalances()\n  }\n\n  async unsync() {\n    await wallet.clearActiveAccount()\n    this.address = null\n    window.location.reload()\n  }\n\n  get bcdAccountUrl() {\n    return `https://api.better-call.dev/v1/account/${bcdNetworkStr}/${this.address}`\n  }\n\n  @action\n  setAddress(value) {\n    this.address = value\n\n    if (simulateAddress) {\n      this.address = simulateAddress\n    }\n  }\n\n  @action\n  setDomain(value) {\n    this.tezDomain = value\n  }\n}\n\nexport const userStore = new UserStore()\n","import { sum, unescape } from 'lodash'\nimport { action, computed, flow, makeObservable, observable } from 'mobx'\nimport { bcdNetworkStr, contractNames, largeWalletSize } from '../config'\nimport { getCachedURL } from '../utils'\nimport { Contract } from './contract'\nimport { Token } from './token'\nimport { userStore } from './userStore'\n\nclass ContractStore {\n  contracts = observable.map()\n  @observable loading = false\n  @observable largeWallet = true\n\n  constructor() {\n    makeObservable(this)\n  }\n\n  @computed\n  get totalTokens() {\n    return sum(Array.from(this.contracts.values()).map((c) => c.tokens.length))\n  }\n\n  async loadBalances() {\n    try {\n      this.setLoading(true)\n      let res = await getCachedURL(\n        userStore.bcdAccountUrl + '/token_balances?size=50&offset=0&hide_empty=true',\n        3600\n      )\n      this.loadFromBCD(res)\n      await this.fillContractNames()\n\n      console.log(`total: ${res.total}`)\n\n      if (res.total <= largeWalletSize) {\n        this.setLargeWallet(false)\n      }\n\n      if (res.total > 50) {\n        for (let offset = 50; offset <= res.total; offset += 50) {\n          res = await getCachedURL(\n            userStore.bcdAccountUrl + `/token_balances?size=50&offset=${offset}&hide_empty=true`,\n            3600,\n            3\n          )\n          this.loadFromBCD(res)\n          console.log(offset)\n        }\n      }\n\n      await this.fillContractNames()\n      this.setLoading(false)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  @action\n  loadFromBCD(data) {\n    for (const tokenData of data.balances) {\n      if (!this.contracts.has(tokenData.contract)) {\n        const contract = new Contract()\n        contract.address = tokenData.contract\n        this.setContract(tokenData.contract, contract)\n      }\n\n      const token = new Token()\n      token.contractAddress = tokenData.contract\n      token.tokenId = tokenData.token_id\n      token.name = tokenData.name\n      token.balance = parseInt(tokenData.balance, 10)\n\n      if (token.tokenId === 12172) {\n        console.log(tokenData)\n      }\n\n      const useDisplayUri =\n        ['KT1RJ6PbjHpwc3M5rw5s2Nbmefwbuwbdxton'].includes(token.contractAddress) ||\n        !tokenData.thumbnail_uri\n      const imageKey = useDisplayUri ? 'display_uri' : 'thumbnail_uri'\n\n      if (tokenData[imageKey]) {\n        token.imageIpfs = tokenData[imageKey].slice(7)\n      }\n\n      // get from IPFS metadata\n      // if (!token.name || !token.imageIpfs) {\n      //   const tokenMeta = await getTokenMetadata({\n      //     contract: token.contractAddress,\n      //     tokenId: token.tokenId,\n      //   })\n      //\n      //   console.log(tokenMeta)\n      //\n      //   if (tokenMeta.displayUri !== tokenData.display_uri) {\n      //     console.log('displayUri', token.tokenId)\n      //     console.log(tokenMeta.displayUri, tokenData.display_uri)\n      //   }\n      //\n      //   if (tokenMeta.name !== tokenData.name) {\n      //     console.log('name', token.tokenId)\n      //     console.log(tokenMeta.name, tokenData.name)\n      //   }\n      // }\n\n      this.contracts.get(tokenData.contract).addToken(token)\n    }\n  }\n\n  @flow\n  *fillContractNames() {\n    for (const contract of this.contracts.values()) {\n      if (contract.name) {\n        continue\n      }\n\n      // prefer nice name\n      if (contractNames[contract.address]) {\n        contract.setName(contractNames[contract.address])\n      }\n      // over bcd\n      else {\n        const res = yield getCachedURL(\n          `https://api.better-call.dev/v1/contract/${bcdNetworkStr}/${contract.address}`\n        )\n        contract.setName(res.alias && unescape(res.alias))\n      }\n\n      // tzstats would need CORS whitelisting\n      // const res = await getCachedURL(\n      //   `https://api.tzstats.com/explorer/contract/${contract.address}?meta=1`\n      // )\n      // contract.setName(res.metadata[contract.address].alias.name)\n    }\n  }\n\n  @action\n  setLoading(value) {\n    this.loading = value\n  }\n\n  @action\n  setContract(address, contract) {\n    this.contracts.set(address, contract)\n  }\n\n  @action\n  setLargeWallet(value) {\n    this.largeWallet = value\n  }\n}\n\nexport const contractStore = new ContractStore()\n\nwindow.contractStore = contractStore\n","import { observer } from 'mobx-react'\nimport React from 'react'\nimport { ipfsGateway } from '../config'\nimport { contractStore } from '../stores/contractStore'\n\n@observer\nclass SelectDiv extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>2. select</h2>\n        {contractStore.loading && <p style={{ marginBottom: 30 }}>... loading ...</p>}\n        <p style={{ marginBottom: 30 }}>total: {contractStore.totalTokens} tokens</p>\n        {Array.from(contractStore.contracts.values()).map((c) => (\n          <SelectContract key={c.address} contract={c} />\n        ))}\n      </div>\n    )\n  }\n}\n\n@observer\nclass SelectContract extends React.Component {\n  render() {\n    const { contract } = this.props\n\n    return (\n      <div style={{ marginBottom: 20 }}>\n        <p className=\"contract-name\" onClick={() => contract.toggleExpanded()}>\n          {contract.name || contract.address}\n        </p>\n        {contract.expanded && (\n          <div style={{ marginTop: 30, marginBottom: 100 }}>\n            {contract.tokens.map((t) => (\n              <SelectToken key={contract.address + '-' + t.tokenId} token={t} />\n            ))}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\n@observer\nclass SelectToken extends React.Component {\n  render() {\n    const { token } = this.props\n    const showImage = !contractStore.largeWallet || token.showImage\n\n    return (\n      <div style={{ display: 'flex', marginBottom: 10 }}>\n        {showImage && (\n          <div\n            className=\"token-image\"\n            style={{\n              backgroundImage: token.imageIpfs ? `url(${ipfsGateway}/${token.imageIpfs})` : null,\n            }}\n          />\n        )}\n        {!showImage && (\n          <div className=\"token-image token-image-show\" onClick={() => token.allowImage(true)}>\n            ⇓\n          </div>\n        )}\n        <div style={{ marginLeft: 10 }}>\n          <p>name: {token.name}</p>\n          <p>id: {token.tokenId}</p>\n          <p>balance: {token.balance}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SelectDiv\n","import { observer } from 'mobx-react'\nimport React from 'react'\nimport { userStore } from '../stores/userStore'\n\n@observer\nclass SyncDiv extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2 style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <>\n            {!userStore.address && (\n              <div>\n                1. <button onClick={() => userStore.sync()}>sync</button>\n              </div>\n            )}\n            {userStore.address && (\n              <>\n                <div>1. sync</div>\n                <span onClick={() => userStore.unsync()}>unsync</span>\n              </>\n            )}\n          </>\n        </h2>\n        {!userStore.address && <p>not logged in</p>}\n        {userStore.address && <p>address: {userStore.domainOrAddress}</p>}\n      </div>\n    )\n  }\n}\n\nexport default SyncDiv\n","import React from 'react'\nimport SelectDiv from './components/select'\nimport SyncDiv from './components/sync'\nimport { userStore } from './stores/userStore'\n\nclass App extends React.Component {\n  async componentDidMount() {\n    await userStore.loadAccount()\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h1>bartez</h1>\n        <SyncDiv />\n        <SelectDiv />\n      </div>\n    )\n  }\n}\n\nexport default App\n","import { configure } from 'mobx'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport './scss/stylesheet.scss'\n\nif (\n  !new (class {\n    x\n  })().hasOwnProperty('x')\n)\n  throw new Error('Transpiler is not configured correctly')\n\nconfigure({\n  computedRequiresReaction: true,\n  reactionRequiresObservable: true,\n  // observableRequiresReaction: true,\n  disableErrorBoundaries: true,\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}